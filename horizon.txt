device_dimensions = {
    "iphone 14 pro max (ios 16.x)": "--window-size=428,926",
    "iphone 14 pro (ios 16.x)": "--window-size=428,926",
    "iphone 14 (ios 16.x)": "--window-size=428,926",
    "iphone 13 pro max (ios 16.x)": "--window-size=428,926",
    "iphone 13 pro (ios 16.x)": "--window-size=428,926",
    "iphone 13 (ios 16.x)": "--window-size=428,926",
    "iphone 12 (ios 15.x)": "--window-size=390,844",
    "iphone 7s/8 plus (models with larger screens)": "--window-size=414,736",
    "iphone 6(s)/7(s)/8 (ios 13.x)": "--window-size=375,667",
    "iphone se 2020 or 2022": "--window-size=375,667",
    "iphone xr or xs/11/12/13 max (pro not needed)": "--window-size=414,896",
    "ipad (latest with ios 15.x)": "--window-size=768,1024",
    "ipad mini/ipad pro": "--window-size=768,1024",
    "android": "--window-size=360,640",
    "samsung galaxy s23 (android 13)": "--window-size=480,960",
    "samsung galaxy s20/21 (android 12)": "--window-size=360,760",
    "samsung galaxy a50/51/52 (android 11)": "--window-size=412,869",
    "samsung galaxy a03 (android 11)": "--window-size=360,640",
    "samsung galaxy a40/41/42 (android 10)": "--window-size=360,640",
    "samsung galaxy a11/12/13 (android 9)": "--window-size=360,640",
    "samsung galaxy z flip 4 and fold 4": "--window-size=360,760",
    "samsung galaxy tab s9 ultra (android 13)": "--window-size=1600,2560",
    "samsung galaxy tab a8 (with latest supported android os)": "--window-size=768,1024",
    "samsung galaxy s7/8/9 (android 8)": "--window-size=360,640",
    "samsung galaxy tab s6/s7 - light (with latest supported android os)": "--window-size=1600,2560",
    "samsung galaxy tab s6/s7/s8 (with latest supported android os)": "--window-size=1600,2560"
}

@pytest.fixture
def driver(request, config_browser, config):
    if config_browser == "chrome_native":
        # Set up Chrome options
        chrome_options = Options()

        # Check the "view" key in the config file and set dimensions accordingly
        if "view" in config:
            view = config["view"].lower()
            if view in device_dimensions:
                chrome_options.add_argument(device_dimensions[view])

        # Initialize the Chrome driver
        driver = webdriver.Chrome(executable_path=ChromeDriverManager().install(), options=chrome_options)

        # Maximize window for desktop view
        driver.maximize_window()

        # Set the viewport size for mobile tests
        if 'view' in config and config_browser == 'chrome_native':
            driver.set_window_size(375, 667)  # Default mobile size, adjust as needed for other views

        request.cls.driver = driver
        yield driver
        driver.quit()
    else:
        raise ValueError(f"Unsupported browser: {config_browser}")
 
